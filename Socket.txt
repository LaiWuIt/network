Socket通信

网络套接字： socket
	一个文件描述符指向一个套接字(该套接字内由内核借助另个缓冲去实现)
	在通信过程中,套接字一定是成对出现;

网络字节序:
	小端法:(pc本地存储)    高位存高地址,地位存低地址;
	大端法:(网络存储)	   高位存低地址,低位存高地址;
	htnol --> 本地  --> 网络(ip)	192.168.1.11 --> string --> stoi --> int --> htnol --> 网络字节序
	htnos --> 本地  --> 网络(port)	
	ntoh1 --> 网络  --> 本地(ip)
	ntohs --> 网络  --> 本地(port)

ip地址转换函数:
	int inet_pton(int af, const char *src, void *dst);			//本地字节序(string ip)   --> 网络字节序
		af: AF_INET/AF_INET6
		src: 传入,ip地址(点分十进制)
		dst: 传出,转换后的网络字节序的ip地址
		返回值:
			成功: 1
			异常: 0,说明src指向的不是一个有效的ip地址.
			失败：-1

	const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);		//网络字节序-->本地字节序(string ip)
		af: AF_INET/AF_INET6

server
	socket()	创建socket
	bind()		绑定服务器地址结构
	listen()	设置监听上限
	accept()	阻塞监听客户端连接
	read(fd)	读socket获取客户端数据		
	write()

client
	socket()	创建socket
	connet()	与服务器建立连接
	write()		写数据到socket
	read()		读转换后的数据


server
	#include <sys/socket.h>
	int socket(int domain, int type, int protocol);			//创建一个套接字
		domain: AF_INET/AF_INET6/AF_UNIX
		type:SOCK_STREAM/SOCK_DGRAM
		protocol:0    //默认协议
		返回值:
			成功:新套接字对应文件描述符
			失败:-1  errno

	#include <arpa/inet.h>
	int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);			//给socket绑定一个地址结构(ip+port)
	    sockfd: socket函数返回值
	    	    struct sockaddr_in addr;
	    	    serv_addr.sin_family = AF_INET;
	    	    serv_addr.sin_port = htons(8888);
	    	    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	    addr:  传入参数(struct sockaddr *)&addr
	    addrlen: sizeof(addr) 地址结构大小
	    返回值：
	    	成功：与服务器进行数据通信的socket对应的文件描述
	    	失败: -1, errno

	ssize_t read(int fd,void *buf,size_t count);
		fd: 文件描述符;
		buf: 为读出数据的缓冲区;
		count: 为每次读取的字节数(是请求读取的字节数，读上来的数据保
         存在缓冲区buf中，同时文件的当前读写位置向后移);

    ssize_t write(int fd,void *buf,size_t count);
    	fd: 是文件描述符;
		buf: 需要写入的数据，通常为字符串;
		count: 每次写入的字节数;

client
	int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);		//使用现有socket与服务器建立连接
		sockfd: socket函数返回值
		addr: 传入参数,服务器的地址结构
		addrlen: 服务器的地址结构的大小
		返回值:
			成功: 0
			失败: -1 errno

size_t  在32位系统上定义为 unsigned int 也就是说在32位系统上是32位无符号整形。在64位系统上定义为 unsigned long 也就是说在64位系统上是64位无符号整形

ssize_t  size_t这个数据类型用来表示可以被执行读写操作的数据块的大小.它和size_t类似,但必需是signed.意即：它表示的是signed size_t类型的   